// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    username      String         @unique
    email         String         @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          Role           @default(USER)
    accounts      Account[]
    sessions      Session[]
    companies     Company[]
    colaborators  Colaborators[]
    products      Product[]
    purchases     Purchase[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id        String   @id @default(cuid())
    image     String
    name      String
    username  String   @unique
    admin_id  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    admin        User           @relation(fields: [admin_id], references: [id])
    colaborators Colaborators[]
    products     Product[]
}

model Colaborators {
    id         String   @id @default(cuid())
    user_id    String
    company_id String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user    User    @relation(fields: [user_id], references: [id])
    company Company @relation(fields: [company_id], references: [id])
}

model Product {
    id         String   @id @default(cuid())
    name       String
    price      Float
    image      String
    company_id String
    created_by String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    company   Company    @relation(fields: [company_id], references: [id])
    user      User       @relation(fields: [created_by], references: [id])
    purchases Purchase[]
}

model Purchase {
    id                String         @id @default(cuid())
    name              String
    email             String
    user_id           String?
    product_id        String
    payment_method_id String
    status            PurchaseStatus @default(VALIDATING)
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt

    user           User?         @relation(fields: [user_id], references: [id])
    product        Product       @relation(fields: [product_id], references: [id])
    payment_method PaymentMethod @relation(fields: [payment_method_id], references: [id])
}

model PaymentMethod {
    id        String            @id @default(cuid())
    name      String
    type      PaymentMethodType
    keyInfo   String
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt

    purchases Purchase[]
}

enum Role {
    ADMIN
    USER
}

enum PurchaseStatus {
    VALIDATING
    VALID
    INVALID
}

enum PaymentMethodType {
    BBVA
    BCP
    INTERBANK
    YAPE
    PLIN
}
