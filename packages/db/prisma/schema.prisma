// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    uid           String         @id
    name          String
    username      String         @unique
    email         String         @unique
    emailVerified DateTime?
    password      String?
    image         String?
    balance       Float          @default(0)
    role          Role           @default(USER)
    companies     Company[]
    colaborators  Colaborators[]
    products      Product[]
    purchases     Purchase[]
    payouts       Payout[]
}

model Company {
    id        String   @id @default(cuid())
    image     String
    name      String
    username  String   @unique
    admin_id  String
    balance   Float    @default(0)
    sk_live   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    admin        User           @relation(fields: [admin_id], references: [uid])
    colaborators Colaborators[]
    products     Product[]
    payouts      Payout[]
}

model Colaborators {
    id         String   @id @default(cuid())
    user_id    String
    company_id String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user    User    @relation(fields: [user_id], references: [uid])
    company Company @relation(fields: [company_id], references: [id])
}

model Product {
    id         String   @id @default(cuid())
    name       String
    price      Float
    image      String
    company_id String
    created_by String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    company   Company    @relation(fields: [company_id], references: [id])
    user      User       @relation(fields: [created_by], references: [uid])
    purchases Purchase[]
}

model Purchase {
    id                String         @id @default(cuid())
    name              String
    email             String
    user_id           String?
    product_id        String
    payment_method_id String
    status            PurchaseStatus @default(VALIDATING)
    commission        Float
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt

    user           User?         @relation(fields: [user_id], references: [uid])
    product        Product       @relation(fields: [product_id], references: [id])
    payment_method PaymentMethod @relation(fields: [payment_method_id], references: [id])
}

model PaymentMethod {
    id        String            @id @default(cuid())
    name      String
    type      PaymentMethodType
    keyInfo   String
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt

    purchases Purchase[]
    payouts   Payout[]
}

model Payout {
    id               String         @id @default(cuid())
    amount           Float
    user_id          String
    company_id       String?
    payout_method_id String
    status           PurchaseStatus @default(VALIDATING)
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    user          User          @relation(fields: [user_id], references: [uid])
    company       Company?      @relation(fields: [company_id], references: [id])
    payout_method PaymentMethod @relation(fields: [payout_method_id], references: [id])
}

enum Role {
    ADMIN
    USER
}

enum PurchaseStatus {
    VALIDATING
    VALID
    INVALID
}

enum PaymentMethodType {
    BBVA
    BCP
    INTERBANK
    YAPE
    PLIN
}
